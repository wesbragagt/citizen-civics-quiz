import { type NextPage } from "next";
import Head from "next/head";
import { useEffect, useState } from 'react';

import { api } from "@/utils/api";

const Answers = (props: { answers: string[], show: boolean; }) => {
  return props.show ? <ul>
    {props.answers.map(ans => <li key={ans}>{ans}</li>)}
  </ul> : null
}

const LoadingRender = (props: { loading: boolean, fallback: React.ReactNode, children: React.ReactNode }) => {
  return <>
    {props.loading ? props.fallback : props.children}
  </>
}

const Home: NextPage = () => {
  const [currentQuestionIndex, setQuestionIndex] = useState(0);
  const [showAnswers, setShowAnswers] = useState(false);
  const [queue, setQueue] = useState<Set<number>>(new Set());
  const { data: questions, isLoading } = api.quiz.questions.useQuery();

  useEffect(() => {
    setShowAnswers(false);
  }, [currentQuestionIndex, setShowAnswers])

  const handleNextQuestion = () => {
    if (currentQuestionIndex >= 0 && currentQuestionIndex < 127) {
      setQuestionIndex(currentQuestionIndex + 1);
    }
  }

  const handlePrevQuestion = () => {
    if (currentQuestionIndex > 0 && currentQuestionIndex <= 127) {
      setQuestionIndex(currentQuestionIndex - 1);
    }
  }

  const handleRandomQuestion = () => {
    if (questions?.length) {
      const randomNumber = Math.floor(Math.random() * questions.length - 1);
      const nextQuestion = questions[randomNumber];
      // Use a queue to store indexes past so we don't repeat questions right away      
      if(queue.values.length === questions.length){
        setQueue(new Set());
        setQuestionIndex(randomNumber);
        return;
      }
      // Store the last index in order to keep track of repeated random index 
      if(nextQuestion && !queue.has(randomNumber)){
        setQuestionIndex(randomNumber)
        setQueue(queue.add(randomNumber))
      }else{
        handleRandomQuestion();
      }
    }
  }

  const handleShowAnswers = () => {
    setShowAnswers(true);
  }

  const question = questions?.[currentQuestionIndex];
  return (
    <>
      <Head>
        <title>Citizen Civics Quiz</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className="container mx-auto">
        <div className="flex gap-2 my-2 p-4">
          <button className="button-info" onClick={handlePrevQuestion}>Prev</button>
          <button className="button-info" onClick={handleNextQuestion}>Next</button>
          <button className="button-info" onClick={handleRandomQuestion}>Random</button>
        </div>
        <div className="flashcard flex flex-col gap-2">
          <LoadingRender loading={isLoading} fallback={<div>loading...</div>}>
            <>
              <h2 className="text-lg font-bold">{question?.question.replace(/(\d+\.)/, '$1 ')}</h2>
              {
                showAnswers ? <Answers show={showAnswers} answers={question?.answers || []} /> : <div className="show-answers-control">
                  <button className="button-info" onClick={handleShowAnswers}>Reveal answers</button>
                </div>
              }
            </>
          </LoadingRender>
        </div>
      </main>
    </>
  );
};

export default Home;
